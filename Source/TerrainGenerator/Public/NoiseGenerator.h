#pragma once

#include "CoreMinimal.h"
#include "FastNoise2/FastNoise2BlueprintLibrary.h"
#include <initializer_list>

class UFastNoise2SimplexGenerator;

/**
 * ノイズ生成器クラス
 */
class TERRAINGENERATOR_API NoiseGenerator {
public:
	NoiseGenerator(const int32 &Seed = 0); // コンストラクタ
	FVector2f CalculateElevation(const FVector2f &Location);
	static FVector2f GetVecToLineSegment(const FVector2f &Point, const FVector2f &StartPoint, const FVector2f &EndPoint);
	static FVector2f GetVecToBezierCurve(const FVector2f &Point, const FVector2f &StartPoint, const FVector2f &ControlPoint, const FVector2f &EndPoint, const float &Tolerance = 0.015625F);
	static bool IsOverBezierCurve(const FVector2f &Point, const FVector2f &Vector, const FVector2f &StartPoint, const FVector2f &ControlPoint, const FVector2f &EndPoint);
	static FVector2f MPoint(const FVector2f &PointA, const FVector2f &PointB);
	static float FastSqrt(const float &Value);
private:
	static constexpr float SimpScaleH = 1200000.0F;
	static constexpr float SimpScaleV = 8000.0F;
	static constexpr float CellScaleH = 40000.0F;
	static constexpr float CellScaleV = 12000.0F;
	static constexpr float SwellScale = 0.015625F;
	static constexpr float StoneScale = 32.0F;
	static constexpr float RidgeRound = 16.0F; // 尾根の丸め割合（逆数）
	static constexpr float RiverWidth = 0.5F; // 河川幅（逆数）
	static constexpr float RiverSlope = 1000.0F; // 河床高上昇度
	static constexpr float WaterDepth = 400.0F; // 水深
	int32 NoiseSeed;
	UFastNoise2SimplexGenerator *SimplexNoise;
	TMap<FIntPoint, FVector3f> VerLocation;
	TMap<FIntPoint, FIntPoint> VerConnection;
	FIntPoint GetVerConnection(const FIntPoint &Position);
	FVector3f GetVerLocation(const FIntPoint &Position);
	int32 Hash(const FIntPoint &Position) const;
	float GetSimplexNoise(const FVector2f &Location, const float &MaxScale = 256.0F);
	FVector2f GetDistSquaredToPath(const FVector2f &Point, const TSet<FIntPoint> &TargetVertices);
	FVector2f GetDistSquaredToRiver(const FVector2f &Point, const TSet<FIntPoint> &SourceVertices, const TSet<FIntPoint> &TargetVertices);
	TPair<FVector2f, float> GetVecToRiver(const FVector2f &Point, const FIntPoint &SourceVertex, const TSet<FIntPoint> &TargetVertices, TMap<FIntPoint, TPair<FVector2f, float>> &Vectors);
	bool IsOverRiver(const FVector2f &Point, const FVector2f &Vector, const FIntPoint &SourceVertex, const TSet<FIntPoint> &TargetVertices);

	static inline const TArray<float> RandVecs = TArray<float>({
		0.2700222198F, 0.9628540911F, 0.3863092627F, 0.9223693152F, 0.04444859006F, 0.999011673F, 0.5992523158F, 0.8005602176F, 0.7819280288F, 0.6233687174F, 0.9464672271F, 0.3227999196F, 0.6514146797F, 0.7587218957F, 0.9378472289F, 0.347048376F,
		0.8497875957F, 0.5271252623F, 0.879042592F, 0.4767432447F, 0.892300288F, 0.4514423508F, 0.379844434F, 0.9250503802F, 0.9951650832F, 0.0982163789F, 0.7724397808F, 0.6350880136F, 0.7573283322F, 0.6530343002F, 0.9928004525F, 0.119780055F,
		0.0532665713F, 0.9985803285F, 0.9754253726F, 0.2203300762F, 0.7665018163F, 0.6422421394F, 0.991636706F, 0.1290606184F, 0.994696838F, 0.1028503788F, 0.5379205513F, 0.84299554F, 0.5022815471F, 0.8647041387F, 0.4559821461F, 0.8899889226F,
		0.8659131224F, 0.5001944266F, 0.0879458407F, 0.9961252577F, 0.5051684983F, 0.8630207346F, 0.7753185226F, 0.6315704146F, 0.6921944612F, 0.7217110418F, 0.5191659449F, 0.8546734591F, 0.8978622882F, 0.4402764035F, 0.1706774107F, 0.9853269617F,
		0.9353430106F, 0.3537420705F, 0.9992404798F, 0.03896746794F, 0.2882064021F, 0.9575683108F, 0.9663811329F, 0.2571137995F, 0.8759714238F, 0.4823630009F, 0.8303123018F, 0.5572983775F, 0.05110133755F, 0.9986934731F, 0.8558373281F, 0.5172450752F,
		0.09887025282F, 0.9951003332F, 0.9189016087F, 0.3944867976F, 0.2439375892F, 0.9697909324F, 0.8121409387F, 0.5834613061F, 0.9910431363F, 0.1335421355F, 0.8492423985F, 0.5280031709F, 0.9717838994F, 0.2358729591F, 0.9949457207F, 0.1004142068F,
		0.6241065508F, 0.7813392434F, 0.662910307F, 0.7486988212F, 0.7197418176F, 0.6942418282F, 0.8143370775F, 0.5803922158F, 0.104521054F, 0.9945226741F, 0.1065926113F, 0.9943027784F, 0.445799684F, 0.8951327509F, 0.105547406F, 0.9944142724F,
		0.992790267F, 0.1198644477F, 0.8334366408F, 0.552615025F, 0.9115561563F, 0.4111755999F, 0.8285544909F, 0.5599084351F, 0.7217097654F, 0.6921957921F, 0.4940492677F, 0.8694339084F, 0.3652321272F, 0.9309164803F, 0.9696606758F, 0.2444548501F,
		0.08925509731F, 0.996008799F, 0.5354071276F, 0.8445941083F, 0.1053576186F, 0.9944343981F, 0.9890284586F, 0.1477251101F, 0.004856104961F, 0.9999882091F, 0.9885598478F, 0.1508291331F, 0.9286129562F, 0.3710498316F, 0.5832393863F, 0.8123003252F,
		0.3015207509F, 0.9534596146F, 0.9575110528F, 0.2883965738F, 0.9715802154F, 0.2367105511F, 0.229981792F, 0.9731949318F, 0.955763816F, 0.2941352207F, 0.740956116F, 0.6715534485F, 0.9971513787F, 0.07542630764F, 0.6905710663F, 0.7232645452F,
		0.290713703F, 0.9568100872F, 0.5912777791F, 0.8064679708F, 0.9454592212F, 0.325740481F, 0.6664455681F, 0.74555369F, 0.6236134912F, 0.7817328275F, 0.9126993851F, 0.4086316587F, 0.8191762011F, 0.5735419353F, 0.8812745759F, 0.4726046147F,
		0.9953313627F, 0.09651672651F, 0.9855650846F, 0.1692969699F, 0.8495980887F, 0.5274306472F, 0.6174853946F, 0.7865823463F, 0.8508156371F, 0.52546432F, 0.9985032451F, 0.05469249926F, 0.1971371563F, 0.9803759185F, 0.6607855748F, 0.7505747292F,
		0.03097494063F, 0.9995201614F, 0.6731660801F, 0.739491331F, 0.7195018362F, 0.6944905383F, 0.9727511689F, 0.2318515979F, 0.9997059088F, 0.0242506907F, 0.4421787429F, 0.8969269532F, 0.9981350961F, 0.061043673F, 0.9173660799F, 0.3980445648F,
		0.8150056635F, 0.5794529907F, 0.8789331304F, 0.4769450202F, 0.0158605829F, 0.999874213F, 0.8095464474F, 0.5870558317F, 0.9165898907F, 0.3998286786F, 0.8023542565F, 0.5968480938F, 0.5176737917F, 0.8555780767F, 0.8154407307F, 0.5788405779F,
		0.4022010347F, 0.9155513791F, 0.9052556868F, 0.4248672045F, 0.7317445619F, 0.6815789728F, 0.5647632201F, 0.8252529947F, 0.8403276335F, 0.5420788397F, 0.9314281527F, 0.363925262F, 0.5238198472F, 0.8518290719F, 0.7432803869F, 0.6689800195F,
		0.985371561F, 0.1704197369F, 0.4601468731F, 0.88784281F, 0.825855404F, 0.5638819483F, 0.6182366099F, 0.7859920446F, 0.8331502863F, 0.553046653F, 0.1500307506F, 0.9886813308F, 0.662330369F, 0.7492119075F, 0.668598664F, 0.743623444F,
		0.7025606278F, 0.7116238924F, 0.5419389763F, 0.8404178401F, 0.3388616456F, 0.9408362159F, 0.8331530315F, 0.5530425174F, 0.2989720662F, 0.9542618632F, 0.2638522993F, 0.9645630949F, 0.124108739F, 0.9922686234F, 0.7282649308F, 0.6852956957F,
		0.6962500149F, 0.7177993569F, 0.9183535368F, 0.3957610156F, 0.6326102274F, 0.7744703352F, 0.9331891859F, 0.359385508F, 0.1153779357F, 0.9933216659F, 0.9514974788F, 0.3076565421F, 0.08987977445F, 0.9959526224F, 0.6678496916F, 0.7442961705F,
		0.7952400393F, 0.6062947138F, 0.6462007402F, 0.7631674805F, 0.2733598753F, 0.9619118351F, 0.9669590226F, 0.254931851F, 0.9792894595F, 0.2024651934F, 0.5369502995F, 0.8436138784F, 0.270036471F, 0.9628500944F, 0.6400277131F, 0.7683518247F,
		0.7854537493F, 0.6189203566F, 0.06005905383F, 0.9981948257F, 0.02455770378F, 0.9996984141F, 0.65983623F, 0.751409442F, 0.6253894466F, 0.7803127835F, 0.6210408851F, 0.7837781695F, 0.8348888491F, 0.5504185768F, 0.1592275245F, 0.9872419133F,
		0.8367622488F, 0.5475663786F, 0.8675753916F, 0.4973056806F, 0.2022662628F, 0.9793305667F, 0.9399189937F, 0.3413975472F, 0.9877404807F, 0.1561049093F, 0.9034455656F, 0.4287028224F, 0.1269804218F, 0.9919052235F, 0.3819600854F, 0.924178821F,
		0.9754625894F, 0.2201652486F, 0.3204015856F, 0.9472818081F, 0.9874760884F, 0.1577687387F, 0.02535348474F, 0.9996785487F, 0.4835130794F, 0.8753371362F, 0.2850799925F, 0.9585037287F, 0.06805516006F, 0.99768156F, 0.7885244045F, 0.6150034663F,
		0.3185392127F, 0.9479096845F, 0.8880043089F, 0.4598351306F, 0.6476921488F, 0.7619021462F, 0.9820241299F, 0.1887554194F, 0.9357275128F, 0.3527237187F, 0.8894895414F, 0.4569555293F, 0.7922791302F, 0.6101588153F, 0.7483818261F, 0.6632681526F,
		0.7288929755F, 0.6846276581F, 0.8729032783F, 0.4878932944F, 0.8288345784F, 0.5594937369F, 0.08074567077F, 0.9967347374F, 0.9799148216F, 0.1994165048F, 0.580730673F, 0.8140957471F, 0.4700049791F, 0.8826637636F, 0.2409492979F, 0.9705377045F,
		0.9437816757F, 0.3305694308F, 0.8927998638F, 0.4504535528F, 0.8069622304F, 0.5906030467F, 0.06258973166F, 0.9980393407F, 0.9312597469F, 0.3643559849F, 0.5777449785F, 0.8162173362F, 0.3360095855F, 0.941858566F, 0.697932075F, 0.7161639607F,
		0.002008157227F, 0.9999979837F, 0.1827294312F, 0.9831632392F, 0.6523911722F, 0.7578824173F, 0.4302626911F, 0.9027037258F, 0.9985126289F, 0.05452091251F, 0.01028102172F, 0.9999471489F, 0.4946071129F, 0.8691166802F, 0.2999350194F, 0.9539596344F,
		0.8165471961F, 0.5772786819F, 0.2697460475F, 0.962931498F, 0.7306287391F, 0.6827749597F, 0.7590952064F, 0.6509796216F, 0.907053853F, 0.4210146171F, 0.5104861064F, 0.8598860013F, 0.8613350597F, 0.5080373165F, 0.5007881595F, 0.8655698812F,
		0.654158152F, 0.7563577938F, 0.8382755311F, 0.545246856F, 0.6940070834F, 0.7199681717F, 0.06950936031F, 0.9975812994F, 0.1702942185F, 0.9853932612F, 0.2695973274F, 0.9629731466F, 0.5519612192F, 0.8338697815F, 0.225657487F, 0.9742067022F,
		0.4215262855F, 0.9068161835F, 0.4881873305F, 0.8727388672F, 0.3683854996F, 0.9296731273F, 0.9825390578F, 0.1860564427F, 0.81256471F, 0.5828709909F, 0.3196460933F, 0.9475370046F, 0.9570913859F, 0.2897862643F, 0.6876655497F, 0.7260276109F,
		0.9988770922F, 0.047376731F, 0.1250179027F, 0.992154486F, 0.8280133617F, 0.560708367F, 0.9324863769F, 0.3612051451F, 0.6394653183F, 0.7688199442F, 0.01623847064F, 0.9998681473F, 0.9955014666F, 0.09474613458F, 0.81453315F, 0.580117012F,
		0.4037327978F, 0.9148769469F, 0.9944263371F, 0.1054336766F, 0.1624711654F, 0.9867132919F, 0.9949487814F, 0.100383875F, 0.6995302564F, 0.7146029809F, 0.5263414922F, 0.85027327F, 0.5395221479F, 0.841971408F, 0.6579370318F, 0.7530729462F,
		0.01426758847F, 0.9998982128F, 0.6734383991F, 0.7392433447F, 0.639412098F, 0.7688642071F, 0.9211571421F, 0.3891908523F, 0.146637214F, 0.9891903394F, 0.782318098F, 0.6228791163F, 0.5039610839F, 0.8637263605F, 0.7743120191F, 0.6328039957F,
	});
};